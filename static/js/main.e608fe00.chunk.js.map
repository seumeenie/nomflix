{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e608fe00.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","/**\n * Section : 무언가 안에 관련 컨텐츠들을 나열해주는 js file (예: Upcoming Movies Section 안에 관련 영화들)\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n//마지막 children에게 margin-bottom을 주고 싶지 않을 때 :not(:last-child) {}\nconst Container = styled.div`\n    :not(:last-child) {\n    margin-bottom: 50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size: 14px;\n    font-weight: 600;\n`;\n\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    grid-gap: 25px;\n`;\n\nconst Section = ({ title, children }) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title:PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default Section;","/**\n * Loader : 페이지 이동시 잠시동안 보여지는 부분\n */\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  margin-top: 20px;\n`;\n\nexport default () => (\n  <Container>\n    <span role=\"img\" aria-label=\"Loading\">\n      ⏰\n    </span>\n  </Container>\n);","/**\n * error나 not found(404)같은 경우를 위한 컴포넌트\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Text = styled.span`\n  color: ${props => props.color};\n`;\n//Arrow Function : => 다음에 {}중괄호를 쓰지 않으면 \"return을 쓰지 않아도 return이 함축되어있음\"(중괄호를 하면 그 안 어딘가에서 return을 쓰겠다는걸 의미)\n//Arrow Function은 이벤트들을 추가하거나 Function을 Anonymous Function으로 만드는데 쓰임\nconst Message = ({ text, color }) => (\n    <Container>\n      <Text color={color}>{text}</Text>\n    </Container>\n  );\n  \nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired\n};\n\nexport default Message;","/**\n * Poster.js : grid로 보여지는 영화나 TV쇼 각각의 이미지와 정보들을 보여주고 꾸며주는 컴포넌트\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  font-size: 12px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${props => props.bgUrl});\n  height: 180px;\n  background-size: cover;\n  border-radius: 4px;\n  background-position: center center;\n  transition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n  bottom: 5px;\n  right: 5px;\n  position: absolute;\n  opacity: 0;\n  transition: opacity 0.1s linear;\n`;\n\nconst ImageContainer = styled.div`\n  margin-bottom: 5px;\n  position: relative;\n  &:hover {\n    ${Image} {\n      opacity: 0.3;\n    }\n    ${Rating} {\n      opacity: 1;\n    }\n  }\n`;\n\nconst Title = styled.span`\n  display: block;\n  margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n    <Container>\n      <ImageContainer>\n      <Image\n          bgUrl={\n            imageUrl\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\n              : require(\"../assets/noPosterSmall.png\").default //이미지가 없으면 assets에 저장한 이미지로 보여주기\n          }\n        />\n        \n        <Rating>\n          <span role=\"img\" aria-label=\"rating\">\n            ⭐️\n          </span>{\" \"}\n          {rating}/10\n        </Rating>\n      </ImageContainer>\n      <Title> \n        {title.length > 18 ? `${title.substring(0, 18)}...` : title}\n      </Title>\n      <Year>{year}</Year>\n    </Container>\n  </Link>\n);\n\nPoster.propTypes = {\n  id: PropTypes.number.isRequired, // user에게 / or /ID proptypes를 보내야 함\n  imageUrl: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.number,\n  year: PropTypes.string,\n  isMovie: PropTypes.bool\n};\n\nexport default Poster;","/**\n * React Component Coding Pattern : Container-Presenter Pattern (Presenter) = data를 보여주는 역할. state(상태값)을 가지고 있지 않고, 클래스도 없는 그냥 함수형 컴포넌트\n * 요약 : Presenter = 스타일 \n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) => (\n  <>\n    <Helmet>\n      <title>Movies | Nomflix</title>\n    </Helmet>\n    {loading ? ( // 디자인 시 두 개의 stage로 loading과 load를 확인해야함 \n      <Loader />\n    ) : (\n      <Container>\n        <Helmet>\n          <title>Movies | Nomflix</title>\n        </Helmet>\n        {nowPlaying && nowPlaying.length > 0 && (\n          <Section title=\"Now Playing\">\n            {nowPlaying.map(movie => ( //Section.js에서의 children(grid)부분\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                imageUrl={movie.poster_path}\n                title={movie.original_title}\n                rating={movie.vote_average}\n                year={movie.release_date.substring(0, 4)} //substring : string을 자르는 기능. 필요한 정보만 잘라서 씀\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {upcoming && upcoming.length > 0 && (\n          <Section title=\"Upcoming Movies\">\n            {upcoming.map(movie => ( //children을 여기에 넣은 이유 : Section에서 div 내부에 원하는 children을 넣을 수 있어야 하기 때문\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                imageUrl={movie.poster_path}\n                title={movie.original_title}\n                rating={movie.vote_average}\n                year={movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Movies\">\n            {popular.map(movie => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                imageUrl={movie.poster_path}\n                title={movie.original_title}\n                rating={movie.vote_average}\n                year={movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message color=\"#e74c3c\" text={error} />}\n      </Container>\n    )}\n  </>\n);\n\n  HomePresenter.propTypes = {\n    nowPlaying: PropTypes.array,\n    popular: PropTypes.array,\n    upcoming: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string\n  };\n  \nexport default HomePresenter;","/**\n * 다른 데이터베이스 사이트에서 무료로 필요한 data를 가져오고 네트워킹하는 파일 \n */\nimport axios from \"axios\";\n//Axios의 좋은 점 : 설정들을 다른 곳에서 반복해 작성할 필요 없이 여기서 설정 가능 -> 모든 작업들은 설정한 내용을 가지고 함\n//설정 : baseURL로 요청을 만들고, 고유 api_key와 language를 받음\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        api_key: \"28ee3a5bb56c12cabf4a4472b8ed5b48\",\n        language: \"en-US\"\n    }\n});\n//function,request 모음\nexport const moviesApi = {\n    //function. URL이 \"~\"인 api.get() 리턴\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: id => api.get(`movie/${id}`, { //라우터,파라미터들을 개별적으로 설정하는 방식(api 전체를 위한 건 아님)\n        params: {\n            //api에서 지원. id,key,...로 한 비디오의 정보를 불러옴\n            append_to_response: \"videos\"\n        }\n    }),\n    //어떤 파라미터 값을 이 함수에 넘기던(term은 그냥 변수임), encodeURIComponent가 값을 인코딩하고 그 문자열로 검색을 함\n    search: term => api.get(\"search/movie\", {\n        params: {\n            query: encodeURIComponent(term)\n        }\n    })\n};\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) => api.get(`tv/${id}`, {\n        params: {\n            append_to_response: \"videos\"\n        }\n    }),\n    search: term => api.get(\"search/tv\", {\n        params: {\n            query: encodeURIComponent(term)\n        }\n    })\n};\n// URL을 여기저기서 요청하는 것보다 명확함","/**\n * React Component Coding Pattern : Container-Presenter에서는 index.js 파일이 만들어져야함. 모든 폴더 안에 있어야 함(*****컨테이너를 export 해야하기 때문).\n */\nimport HomeContainer from \"./HomeContainer\";\n\nexport default HomeContainer;\n//-> 이제 HomeContainer는 state(상태값)을 가진 모든 react component가 될 것","/**\n * React Component Coding Pattern : Container-Presenter Pattern (Container) = data, state(상태값)을 가지고, api를 불러오고, 로직 처리 역할\n * 요약 : Container = 데이터\n */\nimport React from \"react\";\nimport HomePresenter from \"./HomePresenter\";\nimport { moviesApi } from \"api\";\n\nexport default class extends React.Component{\n    //컴포넌트가 마운트 되면 nowPlaying,upcoming,popular를 찾고 다 찾으면 state값을 설정해 줌\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        //error가 있으면 loading이 false가 됨\n        loading: true\n    };\n    //api 메서드 추가\n    //자바스크립트는 실행하면 데이터(일이끝나는것)를 기다려주지 않음 -> async,await 사용\n    async componentDidMount() {\n        //try,catch,finally\n        try{ // 뭔가를 try\n          const { data: { results: nowPlaying } // 객체 비구조화 할당\n                } = await moviesApi.nowPlaying();\n          const { data: { results: upcoming } // { a : b } a를 b로 변수명을 변경해주는 방법(ES6의 마법)\n                } = await moviesApi.upcoming();\n          const { data: { results: popular }\n                } = await moviesApi.popular();\n            this.setState({\n                nowPlaying, // 위 state={} 안의 nowPlaying 값은 이제 이 try안 변수 nowPlaying과 같음\n                upcoming,\n                popular\n            });\n            //onsole.log(nowPlaying);\n        } catch { // 작동하지 않으면 다른 처리를 해줌. 보통 error메시지가 따라옴. error 상태값만 변경\n            this.setState({\n                error: \"Can't find Movie info.\"\n            });\n        } finally { // 뭐가 발생하든 loading값을 false로 처리되고 에러를 보여주거나 무비를 보여줌\n            this.setState({\n                loading: false\n            });\n            //console.log(\"aaa\");\n        }\n    }\n\n    render() {\n        //객체 비구조화 할당(object destructing)\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        //console.log(\"aaa\");\n        //console.log(this.state);\n        return (\n            <HomePresenter\n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\n  <>\n    <Helmet>\n      <title>TV Shows | Nomflix</title>\n    </Helmet>\n    {loading ? (\n      <Loader />\n    ) : (\n      <Container>\n        {topRated && topRated.length > 0 && (\n          <Section title=\"Top Rated Shows\">\n            {topRated.map(show => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                imageUrl={show.poster_path}\n                title={show.original_name}\n                rating={show.vote_average}\n                year={show.first_air_date.substring(0, 4)}\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Shows\">\n            {popular.map(show => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                imageUrl={show.poster_path}\n                title={show.original_name}\n                rating={show.vote_average}\n                year={show.first_air_date.substring(0, 4)}\n              />\n            ))}\n          </Section>\n        )}\n        {airingToday && airingToday.length > 0 && (\n          <Section title=\"Airing Today\">\n            {airingToday.map(show => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                imageUrl={show.poster_path}\n                title={show.original_name}\n                rating={show.vote_average}\n                year={show.first_air_date.substring(0, 4)}\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message color=\"#e74c3c\" text={error} />}\n      </Container>\n    )}\n  </>\n);\n\n\nTVPresenter.propTypes = {\n    topRated:PropTypes.array,\n    popular:PropTypes.array,\n    airingToday:PropTypes.array,\n    loading:PropTypes.bool.isRequired,\n    error:PropTypes.string\n};\n//export 필수\nexport default TVPresenter;","/**\n * React Component Coding Pattern : Container-Presenter에서는 index.js 파일이 만들어져야함. 모든 폴더 안에 있어야 함(*****컨테이너를 export 해야하기 때문).\n */\nimport TVContainer from \"./TVContainer\";\n\nexport default TVContainer;","/* eslint-disable import/no-anonymous-default-export */\nimport React from \"react\";\nimport TVPresenter from \"./TVPresenter\";\nimport { tvApi } from \"../../api\";\n\nexport default class extends React.Component{\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        loading: true,\n        error: null\n    };\n    //데이터 불러오기 완료를 위한 async,await 처리\n    async componentDidMount() {\n        //try,catch,finally\n        try {\n          const {\n            data: { results: topRated } //변수명을 변경 //객체 비구조화 할당\n          } = await tvApi.topRated();\n          const {\n            data: { results: popular }\n          } = await tvApi.popular();\n          const {\n            data: { results: airingToday }\n          } = await tvApi.airingToday();\n          this.setState({ topRated, popular, airingToday });\n        } catch {\n          this.setState({\n            error: \"Can't find TV info.\"\n          });\n        } finally {\n          this.setState({ loading: false });\n        }\n      }\n\n    render() {\n        //객체 비구조화 할당(object destructing)\n        const { topRated, popular, airingToday, loading, error } = this.state;\n        return (\n            <TVPresenter \n                topRated={topRated}\n                popular={popular} \n                airingToday={airingToday} \n                loading={loading} \n                error={error}\n            />\n        );\n    }\n}","/**\n * 라우터의 위치를 알고 알려주는 header component\n */\nimport React from \"react\";\n// Link : 해당 페이지가 내 application에 있으면 javascript 방식으로 가게 해줌\n// withRouter : 다른 컴포넌트를 감싸는 컴포넌트. Router에 어떤 정보를 줌 -> 어떤 컴포넌트와도 연결할 수 있음\nimport { Link, withRouter } from \"react-router-dom\";\n//Styled-components : 이 컴포넌트에서만 작동하는 css를 원할 때, 다른 곳에 영향을 주지 않아야 할 때 사용\nimport styled from \"styled-components\";\n//Styled-components\nconst Header = styled.header`\n    color: white;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    background-color: rgba(20, 20, 20, 0.8);\n    z-index: 10;\n    box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n//Styled-components\nconst List = styled.ul`\n    display:flex;\n`;\n//Styled-components\n//Header가 withRouter란 컴포넌트를 감싼 형태이기 때문에 props를 가질 수 있음\nconst Item = styled.li`\n    width: 80px;\n    height: 50px;\n    text-align: center;\n    border-bottom: 2.5px solid \n        ${props => props.current ? \"#3498db\" : \"transparent\"};\n    transition:border-bottom .5s ease-in-out;\n`;\n//Styled-components\n// a tag는 쓰고 싶지 않을 때 Link로 스타일을 주면서 사용\nconst SLink = styled(Link)`\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n//withRouter 사용 : header가 어떤 Route에 있는지 알게 함\nexport default withRouter(({ location: { pathname } }) => (\n    <Header>\n        <List>\n            <Item current={pathname === \"/\"}>\n                <SLink to=\"/\">Movies</SLink>\n            </Item>\n            <Item current={pathname === \"/tv\"}>\n                <SLink to=\"/tv\">TV</SLink>\n            </Item>\n            <Item current={pathname === \"/search\"}>\n                <SLink to=\"/search\">Search</SLink>\n            </Item>\n        </List>\n    </Header>\n));","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"Components/Loader\";\nimport Section from \"Components/Section\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  margin-bottom: 50px;\n  width: 100%;\n`;\n\nconst Input = styled.input`\n  all: unset;\n  font-size: 28px;\n  width: 100%;\n`;\n//폼을 만들고 onSubmit 호출 = handleSubmit 호출하기 위함\nconst SearchPresenter = ({\n    movieResults, \n    tvResults, \n    loading, \n    searchTerm,\n    handleSubmit, \n    error,\n    updateTerm\n  }) => (\n    <Container>\n      <Helmet>\n      <title>Search | Nomflix</title>\n    </Helmet>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Search Movies or TV Shows...\"\n          value={searchTerm} //value 값을 javascript로부터 얻고 싶어 state에 searchTerm이 존재 -> default로 input(검색 입력 란)에 이 value가 존재(컨테이너로부터 옴)\n          onChange={updateTerm}\n        />\n      </Form>\n      {loading ? (\n        <Loader />\n      ) : ( // <> : fragments : 한가지 component만 리턴 가능한 리액트 환경에서 다중 리턴이 가능하게 함\n        <>\n          {movieResults && movieResults.length > 0 && (\n            <Section title=\"Movie Results\">\n              {movieResults.map(movie => (\n                <Poster\n                key={movie.id}\n                id={movie.id}\n                imageUrl={movie.poster_path}\n                title={movie.original_title}\n                rating={movie.vote_average}\n                year={movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n              ))}\n            </Section>\n          )}\n          {tvResults && tvResults.length > 0 && (\n            <Section title=\"TV Show Results\">\n              {tvResults.map(show => (\n                <Poster\n                key={show.id}\n                id={show.id}\n                imageUrl={show.poster_path}\n                title={show.original_name}\n                rating={show.vote_average}\n                year={show.first_air_date.substring(0, 4)}\n              />\n              ))}\n            </Section>\n          )}\n          {error && <Message color=\"#e74c3c\" text={error} />}\n          {tvResults &&\n          movieResults &&\n          tvResults.length === 0 &&\n          movieResults.length === 0 && (\n            <Message text={`Nothing found for: ${searchTerm}`} color=\"#95a5a6\" />\n          )}\n        </>\n      )}\n    </Container>\n  );\n\nSearchPresenter.propTypes = {\n    movieResults:PropTypes.array,\n    tvResults:PropTypes.array,\n    error:PropTypes.string,\n    searchTerm: PropTypes.string,\n    loading:PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired\n};\n\nexport default SearchPresenter;","/**\n * React Component Coding Pattern : Container-Presenter에서는 index.js 파일이 만들어져야함. 모든 폴더 안에 있어야 함(*****컨테이너를 export 해야하기 때문).\n */\nimport SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;","/**\n * 검색 기능 컨테이너 : 기존 컨테이너에 검색 로직을 두가지 추가함 \n */\nimport React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { moviesApi, tvApi } from \"../../api\";\n\nexport default class extends React.Component{\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: \"\",\n        loading: false,\n        error: null\n    };\n    //누군가가 폼(=검색창)에서 text를 입력 -> 엔터 누름 = handleSubmit\n    // searchTerm이 빈칸이 아닌걸 체크 -> searchByTerm함수를 실행\n    handleSubmit = event => {\n      event.preventDefault();\n        const { searchTerm } = this.state;\n        if (searchTerm !== \"\") { //(\"\"=문자열) 빈 문자열이 아니라면\n          this.searchByTerm(); //데이터 불러옴\n        }\n    };\n    //event라 칭한 인자값(입력값)을 받고 value로 선언되어 value가 상태값을 업데이트\n    updateTerm = event => {\n      const {\n        target: { value } //value : 입력값\n      } = event;\n      this.setState({\n        searchTerm: value\n      });\n    };\n    //handleSubmit을 통해 searchByTerm이 모든 작업들을 준비해줌\n    //searchTerm이 공백이 아닐때,(21번째 줄 참고) searchTerm을 인자로 넣고 searchByTerm을 호출 \n    searchByTerm = async () => {\n        const { searchTerm } = this.state;\n        this.setState({ loading: true }); //타이핑,검색 했을 때 로딩을 true\n        try {\n          const {\n            data: { results: movieResults }\n          } = await moviesApi.search(searchTerm);\n          const {\n            data: { results: tvResults }\n          } = await tvApi.search(searchTerm);\n          this.setState({\n            movieResults,\n            tvResults\n          });\n        } catch {\n          this.setState({ error: \"Can't find results.\" });\n        } finally {\n          this.setState({ loading: false });\n        }\n    };\n\n    render() {\n      //Structuring\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n        return (\n            <SearchPresenter\n                movieResults={movieResults}\n                tvResults={tvResults}\n                searchTerm={searchTerm} \n                loading={loading} \n                error={error}\n                handleSubmit={this.handleSubmit}\n                updateTerm={this.updateTerm}\n            />\n        );\n    }\n}","/**\n * DetailPresenter.js : 각각의 영화나 TV쇼를 클릭시 세부정보를 보여주는 컴포넌트\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\"; // 웹사이트의 head(웹에서 보여지는 페이지의 제목)를 바꿔주는 모듈\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\n\nconst Container = styled.div`\n  height: calc(100vh - 50px);\n  width: 100%;\n  position: relative;\n  padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url(${props => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  filter: blur(3px);\n  opacity: 0.5;\n  z-index: 0;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n  z-index: 1;\n  height: 100%;\n`;\n\nconst Cover = styled.div`\n  width: 30%;\n  background-image: url(${props => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Data = styled.div`\n  width: 70%;\n  margin-left: 10px;\n`;\n\nconst Title = styled.h3`\n  font-size: 32px;\n`;\n\nconst ItemContainer = styled.div`\n  margin: 20px 0;\n`;\n\nconst Item = styled.span``;\n\nconst Divider = styled.span`\n  margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n  font-size: 12px;\n  opacity: 0.7;\n  line-height: 1.5;\n  width: 50%;\n`;\n\nconst DetailPresenter = ({ result, loading, error }) => (\n    <>\n      <Helmet>\n        <title>Loading | Nomflix</title>\n      </Helmet>\n      {loading ? (\n      <Loader /> \n  ) : (\n    <Container>\n      <Helmet>\n        <title>\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\n          | Nomflix\n        </title>\n      </Helmet>\n      <Backdrop\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n      />\n      <Content>\n        <Cover\n          bgImage={\n            result.poster_path\n              ? `https://image.tmdb.org/t/p/original${result.poster_path}`\n              : require(\"../../assets/noPosterSmall.png\").default\n          }\n        />\n        <Data>\n          <Title>\n            {result.original_title\n              ? result.original_title\n              : result.original_name}\n          </Title>\n          <ItemContainer>\n            <Item>\n              {result.release_date\n                ? result.release_date.substring(0, 4)\n                : result.first_air_date.substring(0, 4)}\n            </Item>\n            <Divider>•</Divider>\n            <Item>\n              {result.runtime ? result.runtime : result.episode_run_time[0]} min\n            </Item>\n            <Divider>•</Divider>\n            <Item>\n              {result.genres &&\n                result.genres.map((genre, index) => // map function은 index를 줄 수 있어서 현재 항목의 number를 알려줌.\n                  index === result.genres.length - 1 //index는 result.genres.length를 할당\n                    ? genre.name\n                    : `${genre.name} / `    // 화면 상 /로 끊긴 장르들의 이름\n                )}\n            </Item>\n          </ItemContainer>\n          <Overview>{result.overview}</Overview>\n        </Data>\n      </Content>\n      {error && <Message color=\"#e74c3c\" text={error} />}\n    </Container>\n  )}\n    </>\n  );\n\n  DetailPresenter.propTypes = {\n    result: PropTypes.object,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string\n  };\n\nexport default DetailPresenter;","/**\n * React Component Coding Pattern : Container-Presenter에서는 index.js 파일이 만들어져야함. 모든 폴더 안에 있어야 함(*****컨테이너를 export 해야하기 때문).\n */\nimport DetailContainer from \"./DetailContainer\";\n\nexport default DetailContainer;","/**\n * DetailContainer.js : 각각의 영화나 TV쇼를 클릭시 세부정보를 불러와 Presenter 넘겨줌\n */\nimport { moviesApi, tvApi } from \"../../api\";\nimport React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\n\nexport default class extends React.Component{\n    constructor(props){ //생성자 클래스(props만들어줌)\n        super(props);\n        //pathname props(this.state에서의 props들이 아닌 바로 아랫줄의 props)생성(default state)\n        const {location: { pathname }} = props; //이 props(=pathname)는 존재하지 않음. super(props)는 생성자 클래스 이기 때문(props 생성해줌)\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\") //isMovie란 props생성\n        };\n\n    }\n\n    async componentDidMount(){\n        //props를 가져옴\n        const {\n             match: {\n                 params: {id} // 파라미터값{아이디가 숫자형태}\n             },\n             history: { push }\n            } = this.props;\n            //movie, parsedID 얻어옴\n            const { isMovie } = this.state; \n            const parsedId = parseInt(id); //string값인 id를 int값으로 변환(숫자화)\n            \n            if(isNaN(parsedId)){ //detail값이 숫자(=id)가 아니면\n                return push(\"/\"); // 홈으로 감\n            } // *****기억! return하면 함수는 종료함(만약 isNaN이면 push하고 종료됨) return이 없으면 사용자를 다른 페이지로 보냄(자바스크립트가 함수를 리턴으로 끝내지 않았기 때문)\n            \n            let result = null; //***비어있고 변하는 변수값인 result 선언. result가 movie든 tv든 덮어쓰게 됨\n            try {\n                //result 덮어쓰기\n                if(isMovie){\n                    //맨앞 맨뒤 ()괄호는 \"const =\"가 앞에 붙은것과 같음(const를 못쓰는 이유는 위에서 result가 이미 선언이 됐기 때문에, const를 쓰면 작동은 해도 같은 result가 아니게 됨)\n                    //request(요청)이 data키를 주고 request.data는 result랑 같음\n                    //= data를 request로 가져와 집어넣음(요약.)\n                   ({ data: result } = await moviesApi.movieDetail(parsedId));\n                } else {\n                   ({ data: result } = await tvApi.showDetail(parsedId));\n                }\n            } catch { //에러가 발생하면 여기에서 처리\n                this.setState({ error: \"Can't find anything.\"});\n            } finally {\n                this.setState({ loading: false, result });\n            }\n    }\n\n    render() {\n        const { result, error, loading } = this.state;\n        //console.log(result);\n        return (\n            <DetailPresenter\n                result={result}\n                error={error}\n                loading={loading}\n            />);\n    }\n}","/**\n * 컴포넌트 묶음이자 페이지들을 구성해주는 React Router 파일\n */\nimport React from \"react\";\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\n//HashRouter : 페이지의 Hash를 사용. url이 좀 난잡해 보임. 앱처럼 보임. \n//BrowserRouter : url이 웹사이트처럼 보이고 url이 이쁨. 두 라우터는 취향 차이. 보안상으론 browser쪽이 좋음.\nimport Home from \"Routes/Home\";\nimport TV from \"Routes/TV\";\nimport Header from \"Components/Header\";\nimport Search from \"Routes/Search\";\nimport Detail from \"Routes/Detail\";\n //path : 어느 URL에서 해당 Route를 render할지 알려줌\n //Router는 오직 하나의 child만 가질 수 있음 = Router는 오직 하나의 Route만 Render하게 해줌(Router안에 Route와 Redirect 두가지를 사용 못함)\n //두개 이상을 Render하려면 Switch를 사용해 \"한번에 오직 하나의 Route만 Render\"하게 해줌(Router안에 Route와 Redirect를 번갈아 쓸 수 있게 해줌)\n //Redirect : 일치하는 Route가 하나도 없다면 어느 페이지든 받아서 to에 쓴 대로 보내줌. 여기선 이상한 url로 갈 시 home으로 Redirect시켜줌\n //exact : 해당 path와 정확히 일치할 때만 해당 컴포넌트로 render됌\n //default로 Router는 모든 Route들에게 props(정보)를 줌(react-router-dom을 임포트 했기 때문)\nexport default () => (\n  <Router>\n    <>\n    <Header />\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/tv\" component={TV} />\n      <Route path=\"/search\" component={Search} />\n      <Route path=\"/movie/:id\" component={Detail} />\n      <Route path=\"/show/:id\" component={Detail} />\n      <Redirect from=\"*\" to=\"/\" />\n    </Switch>\n    </>\n  </Router>\n);","/**\n * 해당 사이트의 폰트를 설정. Global -> 모든 페이지에 적용\n */\nimport { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n//어떤 컴포넌트들에 스타일을 넣지 않고 Global한 웹사이트(전체)에 스타일을 넣어줌 -> Default 스타일을 추가\nconst globalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20, 20, 20, 1);\n        color:white;\n        padding-top:50px;\n    }\n`;\n\nexport default globalStyles;","import React, { Component } from \"react\"; \nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n//Fragments(<></>) : 두개의 컴포넌트를 return할 수 없는 React의 규칙이 있는데 <></>를 사용해 원하는 만큼 컴포넌트를 return할 수 있게 해줌\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\"; //.env의 NODE_PATH=src가 기본적으로 src파일을 보게 만들어줌\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}